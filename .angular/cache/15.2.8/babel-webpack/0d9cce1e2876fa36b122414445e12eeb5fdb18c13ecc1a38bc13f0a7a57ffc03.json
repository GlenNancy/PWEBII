{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class ComentarioService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.URL = 'http://localhost:3000/comentario';\n  }\n  buscarTodos() {\n    return this.http.get(this.URL).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  buscarPorId(id) {\n    return this.http.get(`${this.URL}/${id}`).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  cadastrar(produto) {\n    return this.http.post(this.URL, produto).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  atualizar(produto) {\n    return this.http.put(`${this.URL}/${produto.id}`, produto).pipe(map(retorno => retorno), catchError(erro => this.exibirErro(erro)));\n  }\n  exibirErro(e) {\n    this.exibirMensagem(\"Erro!!!\", 'Não foi possivel realizar a operação', 'toast-error');\n    return EMPTY;\n  }\n  exibirMensagem(titulo, mensagem, tipo) {\n    this.toastr.show(mensagem, titulo, {\n      closeButton: true,\n      progressBar: true\n    }, tipo);\n  }\n}\nComentarioService.ɵfac = function ComentarioService_Factory(t) {\n  return new (t || ComentarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nComentarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ComentarioService,\n  factory: ComentarioService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["EMPTY","catchError","map","ComentarioService","constructor","http","toastr","URL","buscarTodos","get","pipe","retorno","erro","exibirErro","buscarPorId","id","cadastrar","produto","post","atualizar","put","e","exibirMensagem","titulo","mensagem","tipo","show","closeButton","progressBar","i0","ɵɵinject","i1","HttpClient","i2","ToastrService","factory","ɵfac","providedIn"],"sources":["D:\\2DS\\AntonioMauricio\\PWEBII\\frontend\\frontend\\src\\app\\services\\comentario.Service.ts"],"sourcesContent":["import { IComentario } from './../model/IComentario.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComentarioService {\r\n  private URL: string = 'http://localhost:3000/comentario';\r\n\r\n  constructor(private http: HttpClient, private toastr: ToastrService) {}\r\n\r\n  buscarTodos(): Observable<IComentario[]>{\r\n    return this.http.get<IComentario[]>(this.URL).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  buscarPorId(id: number): Observable<IComentario>{\r\n    return this.http.get<IComentario>(`${this.URL}/${id}`).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  cadastrar(produto: IComentario): Observable<IComentario>{\r\n    return this.http.post<IComentario>(this.URL, produto).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  atualizar(produto: IComentario): Observable<IComentario>{\r\n    return this.http.put<IComentario>(`${this.URL}/${produto.id}`, produto).pipe(\r\n      map(retorno => retorno),\r\n      catchError(erro => this.exibirErro(erro)));\r\n\r\n  }\r\n\r\n  exibirErro(e: any):Observable<any> {\r\n    this.exibirMensagem(\"Erro!!!\", 'Não foi possivel realizar a operação', 'toast-error');\r\n    return EMPTY;\r\n\r\n  }\r\n  exibirMensagem(titulo:string, mensagem: string, tipo: string):void{\r\n    this.toastr.show(mensagem, titulo,{closeButton:true, progressBar:true}, tipo);\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAASA,KAAK,QAAoB,MAAM;AACxC,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;;;;AAM9C,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB,EAAUC,MAAqB;IAA/C,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,GAAG,GAAW,kCAAkC;EAEc;EAEtEC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAgB,IAAI,CAACF,GAAG,CAAC,CAACG,IAAI,CAChDR,GAAG,CAACS,OAAO,IAAIA,OAAO,CAAC,EACvBV,UAAU,CAACW,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAc,GAAG,IAAI,CAACF,GAAG,IAAIQ,EAAE,EAAE,CAAC,CAACL,IAAI,CACzDR,GAAG,CAACS,OAAO,IAAIA,OAAO,CAAC,EACvBV,UAAU,CAACW,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAI,SAASA,CAACC,OAAoB;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAc,IAAI,CAACX,GAAG,EAAEU,OAAO,CAAC,CAACP,IAAI,CACxDR,GAAG,CAACS,OAAO,IAAIA,OAAO,CAAC,EACvBV,UAAU,CAACW,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAO,SAASA,CAACF,OAAoB;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAc,GAAG,IAAI,CAACb,GAAG,IAAIU,OAAO,CAACF,EAAE,EAAE,EAAEE,OAAO,CAAC,CAACP,IAAI,CAC1ER,GAAG,CAACS,OAAO,IAAIA,OAAO,CAAC,EACvBV,UAAU,CAACW,IAAI,IAAI,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,CAAC,CAAC;EAE9C;EAEAC,UAAUA,CAACQ,CAAM;IACf,IAAI,CAACC,cAAc,CAAC,SAAS,EAAE,sCAAsC,EAAE,aAAa,CAAC;IACrF,OAAOtB,KAAK;EAEd;EACAsB,cAAcA,CAACC,MAAa,EAAEC,QAAgB,EAAEC,IAAY;IAC1D,IAAI,CAACnB,MAAM,CAACoB,IAAI,CAACF,QAAQ,EAAED,MAAM,EAAC;MAACI,WAAW,EAAC,IAAI;MAAEC,WAAW,EAAC;IAAI,CAAC,EAAEH,IAAI,CAAC;EAC/E;;AAxCWtB,iBAAiB,C;mBAAjBA,iBAAiB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;AAAA;AAAjB/B,iBAAiB,C;SAAjBA,iBAAiB;EAAAgC,OAAA,EAAjBhC,iBAAiB,CAAAiC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}